    # -*- coding: utf-8 -*-
"""
/***************************************************************************
 SauberViewer
                                 A QGIS plugin
 Provides access and control over SAUBER raster data layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-16
        git sha              : $Format:%H$
        copyright            : (C) 2020 by geomer GmbH
        email                : info@geomer.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
#TODO: Clean up imports
from qgis.core import (
    Qgis,
    QgsProject, 
    QgsRasterLayer, 
    QgsRectangle 

)

from qgis.PyQt.QtWidgets import (
    QAction, 
    QInputDialog, 
    QWidget,
    QTableWidgetItem,
    QFileDialog
)

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.utils import iface
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets

import os.path
import requests
import xml.etree.ElementTree as ET
from datetime import datetime
from collections import defaultdict, OrderedDict

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sauber_raster_viewer_dialog import SauberRasterViewerDialog
from qgis.gui import QgsTemporalControllerWidget
from configparser import ConfigParser


class SauberRasterViewer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        self.station_dict = {}

        self.cwd = os.path.join(os.path.dirname(__file__))

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SauberViewer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SAUBER Raster Viewer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SauberViewer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sauber_raster_viewer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SAUBER raster viewer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SAUBER Raster Viewer'),
                action)
            self.iface.removeToolBarIcon(action)


    def getConfig(self):
        """Find out if config file exists, parse relevant params"""

        config = ConfigParser()
        config.read(os.path.join(os.path.dirname(__file__),'sauber_config.ini'))

        if config.has_option("endpoints", "wmst_base") and config.has_option("endpoints", "capabilities_url"):
            endpoints = config["endpoints"]
            self.wmst_base = endpoints["wmst_base"]
            self.capabilities_url = endpoints["capabilities_url"]
        else: 
            iface.messageBar().pushMessage("Error", "Konfigurationsdatei konnte nicht geladen werden", level=Qgis.Critical, duration=5)
            self.dlg.close()


    def checkLayerExists(self,layerSource):
        """
        Check if layer is already loaded to avoid duplicates.
        Expects Layer source since names can be changed.
        """

        layer_paths = []
        layer_paths = [layer.source() for layer in QgsProject.instance().mapLayers().values()]

        if layerSource in layer_paths:
            return
        else: 
            return 1


    def loadRasterLayer(self,warning=True):
        """
        Load raster layer into map canvas
        """

        curr_region, curr_pollutant = self.getCurrCombo()
        layer_name = "{0} {1}".format(curr_region.upper(),curr_pollutant.upper())
        timeframe = self.getMinMaxTime()

        wmst_url = self.wmst_base.format(curr_region,curr_pollutant,timeframe)
        
        raster_layer = QgsRasterLayer(wmst_url, layer_name, "WMS")

        if self.checkLayerExists(wmst_url):
            if raster_layer.isValid():
                QgsProject.instance().addMapLayer(raster_layer)
            else: iface.messageBar().pushMessage("Error", "Raster Layer konnte nicht geladen werden", level=Qgis.Critical, duration=4)
            return
        elif warning==True: 
            iface.messageBar().pushMessage("Hinweis", "Raster Layer {} bereits geladen".format(layer_name), level=Qgis.Info, duration=4)
            return

        # Get Layer ID, set active and visible 
        layer = QgsProject.instance().mapLayersByName(layer_name)[0]
        iface.setActiveLayer(layer)
        QgsProject.instance().layerTreeRoot().findLayer(layer).setItemVisibilityChecked(True)



    def getCapabilitiesFile(self):
        """ Download getCap File"""

        # capabilities_url = "https://sauber-sdi.meggsimum.de/geoserver/image_mosaics/wms?service=WMS&version=1.1.0&request=GetCapabilities"
        capabilities_url = self.capabilities_url

        try:
            capabilities_response = requests.get(capabilities_url, verify=False)#,auth)) # TODO: Enable auth, enable verifiy
            capabilities_text = capabilities_response.text
        except requests.exceptions.HTTPError as http_err:
            print(f'HTTP error: {http_err}')
        except Exception as err:
            print(f'Error occurred: {err}')
            iface.messageBar().pushMessage("Error", "Raster Capabilities konnten nicht heruntergeladen werden", level=Qgis.Critical, duration=4)

        capabilities_root = ET.fromstring(capabilities_text)  

        self.getRasterLayerDict(capabilities_root)

    def getMinMaxTime(self):
        """ Retrieve min and max time for raster mosaic"""

        curr_region, curr_pollutant = self.getCurrCombo()

        for val in self.raster_dict[curr_region][curr_pollutant]:
            if not "EPSG" in val: 
                timeframe = val

#         Iterate over dict in case of Python < 3.6 (unordered dict)
#         timeframe = self.raster_dict[curr_region][curr_pollutant][0]

        min_time = timeframe.split("/")[0]
        max_time = timeframe.split("/")[1]

        # Set DateTime Widgets to min,max time for each station+component
        self.dlg.start_date_btn.setMinimumDateTime(QtCore.QDateTime.fromString(min_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))
        self.dlg.start_date_btn.setDateTime(QtCore.QDateTime.fromString(min_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))
        self.dlg.end_date_btn.setMaximumDateTime(QtCore.QDateTime.fromString(max_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))
        self.dlg.end_date_btn.setDateTime(QtCore.QDateTime.fromString(max_time, "yyyy-MM-ddTHH:mm:ss.zzzZ"))

        return timeframe


    def getRasterLayerDict(self,xml_root):
        """Iterate through getCap XML and create dict of region:pollutants:timeframe""" 
            
        # self.raster_dict = defaultdict(dict)
        self.raster_dict = defaultdict(dict)

        for layer in xml_root.findall("./Capability/Layer/Layer/Name"):
            lyr_txt = layer.text
            # Split layer name by underscore, max splits = 1
            region = lyr_txt.split("_",1)[0]
            pollutant = lyr_txt.split("_",1)[1]
            # Iterate possible time frames of layers 
            for timeframe in xml_root.findall("./Capability/Layer/Layer[Name='{0}']/Extent".format(lyr_txt)):
                timeframe_txt = timeframe.text
                # Add to dict
                self.raster_dict[region].update({pollutant:timeframe_txt})

            for srs in xml_root.findall("./Capability/Layer/Layer[Name='{0}']/SRS".format(lyr_txt)):
                srs_txt = srs.text
                self.raster_dict[region].update({pollutant:[timeframe_txt,srs_txt]})

        # clear combobox, then push regions
        self.dlg.box_region.clear()
        for region in self.raster_dict.keys():
            self.dlg.box_region.addItem(region.upper())

        # Call function for first iteration on startup
        self.filterRasterPollutants()


    def getCurrCombo(self):
         """ Retrieves current region, pollutant selection """

         curr_region = self.dlg.box_region.currentText().lower()
         curr_pollutant = self.dlg.box_raster_pollutant.currentText().lower()
    
         return curr_region, curr_pollutant


    def filterRasterPollutants(self):
        """ Dict lookup: Find corresponding pollutants for selected station  """

        curr_region, curr_pollutant = self.getCurrCombo()
        self.dlg.box_raster_pollutant.clear()
        # Insert pollutants into UI box 
        for pollutant in self.raster_dict[curr_region].keys():
            self.dlg.box_raster_pollutant.addItem(pollutant.upper())

        # Fill UI Datetime boxes
        self.getMinMaxTime()


    def zoomToRaster(self):

        self.loadRasterLayer(warning=False)
        layer = iface.activeLayer()
        canvas = iface.mapCanvas()
        extent = layer.extent()
        canvas.setExtent(extent)


    def show_temp_control(self):

        for i in iface.mainWindow().findChildren(QtWidgets.QDockWidget):
            if i.objectName() == 'Temporal Controller':
                i.setVisible(True)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

            """
            Show temporal controller itself in widget
            """
            # temp_controller = iface.mapCanvas().temporalController() 
            # iface.mapCanvas().setTemporalController(temp_controller)
            # self.dlg.verticalLayout_2.addWidget(self.temporal_controller_widget, alignment=QtCore.Qt.AlignRight | QtCore.Qt.AlignBottom)

        self.dlg = SauberRasterViewerDialog()
        self.getConfig()
        self.getCapabilitiesFile()

        # Show Temp Controller 
        self.dlg.show_tempctl_btn.clicked.connect(self.show_temp_control)


        # Zoom to raster btn
        self.dlg.zoom_to_raster.clicked.connect(self.zoomToRaster)


        # Listen for selection change
        self.dlg.box_region.activated.connect(self.filterRasterPollutants)
        self.dlg.box_raster_pollutant.activated.connect(self.getMinMaxTime)

        # Load layer btn
        self.dlg.load_raster_layer_btn.clicked.connect(lambda: self.loadRasterLayer(True))

        self.dialogs = list()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed 

        if result:

            self.dlg.close()
