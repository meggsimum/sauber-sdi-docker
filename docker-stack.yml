version: "3.7"

networks:
    sauber-network:
        attachable: true

volumes:
    db_data:
    geoserver_data:
    raster_data:
    json_data:
    lanuv_data:
    lubw_data:
    um_data:
    um_logs:
    um_licence:
    um_users:

secrets:
    postgrest_password:
        file: ./secrets/pgrst_password.txt
        name: pgrest_password_v3
    postgrest_jwt_secret:
        file: ./secrets/pgrst_jwt_secret.txt
        name: pgrest_sauber_v3
    lubw_user:
        file: ./secrets/lubw_user.txt
        name: lubw_user_v1
    lubw_password:
        file: ./secrets/lubw_password.txt
        name: lubw_password_v1
    lubw_server:
        file: ./secrets/lubw_server.txt
        name: lubw_server_v1
    geoserver_user:
        file: ./secrets/geoserver_user.txt
        name: geoserver_user_v1
    geoserver_password:
        file: ./secrets/geoserver_password.txt
        name: geoserver_password_v2
    app_password:
        file: ./secrets/app_password.txt
        name: app_password_v3
    sauber_user_password:
        file: ./secrets/sauber_user_password.txt
        name: sauber_user_password_v2
    sauber_manager_password:
        file: ./secrets/sauber_manager_password.txt
        name: sauber_manager_password_v2
    postgres_init_password:
        file: ./secrets/postgres_init_password.txt
        name: postgres_init_password_v2
    hhi_rest_user:
        file: ./secrets/hhi_rest_user.txt
        name: hhi_rest_user_v1
    hhi_rest_pw:
        file: ./secrets/hhi_rest_pw.txt
        name: hhi_rest_pw_v1
    hhi_ip_address:
        file: ./secrets/hhi_ip_address.txt
        name: hhi_ip_addr_v1
    slack_channel_url:
        file: ./secrets/slack_channel_url.txt
        name: slack_channel_url_v1



services:

    db:
        image: "sauberprojekt/db:${TAG:-master}"
        networks:
            - sauber-network
        volumes:
            - db_data:/var/lib/postgresql/data
            - ./geoserver_mnt/raster_data:/opt/raster_data:ro
            - ./db_backups:/home/backups/database/postgresql
        secrets:
            - postgrest_jwt_secret
            - postgrest_password
            - sauber_manager_password
            - sauber_user_password
            - app_password
            - postgres_init_password
        environment:
            - PGRST_PASSWORD_FILE=/run/secrets/postgrest_password
            - PGRST_JWT_SECRET_FILE=/run/secrets/postgrest_jwt_secret
            - SAUBER_MANAGER_PASSWORD_FILE=/run/secrets/sauber_manager_password
            - SAUBER_USER_PASSWORD_FILE=/run/secrets/sauber_user_password
            - APP_PASSWORD_FILE=/run/secrets/app_password
            - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_init_password
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        ports:
            - "5440:5432"

    geoserver:
        image: "meggsimum/geoserver:2.19.1"
        networks:
            - sauber-network
        secrets:
            - geoserver_user
            - geoserver_password
        environment:
            - USE_CORS=0
            - USE_VECTOR_TILES=1
            - EXTRA_JAVA_OPTS=-Xms1g -Xmx2g
            - GEOSERVER_CSRF_WHITELIST=sauber-sdi.meggsimum.de
        volumes:
            - ./geoserver_mnt/geoserver_data:/opt/geoserver_data/:Z
            - ./geoserver_mnt/raster_data:/opt/raster_data:Z
           # - ./geoserver_mnt/additional_libs:/opt/additional_libs/:Z
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        depends_on:
            - db
        ports:
            - "8080:8080"

    geoserver_init:
        image: "sauberprojekt/geoserver_init:${TAG:-master}"
        networks:
            - sauber-network
        secrets:
            - geoserver_user
            - geoserver_password
            - app_password
        environment:
            - GSINIT_WS=station_data,image_mosaics
            - GSINIT_STATION_WS=station_data
            - GSINIT_STATION_DS=station_data
            - GSINIT_PG_HOST=db
            - GSINIT_PG_PORT=5432
            - GSINIT_PG_SCHEMA=station_data
            - GSINIT_PG_DB=sauber_data
            - GSINIT_VERBOSE=1
            - GSINIT_PROXY_BASE_URL=https://sauber-sdi.meggsimum.de/geoserver
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        depends_on:
            - geoserver
        command: ["./wait-for.sh", "geoserver:8080", "postgrest:3000", "--", "npm", "start"]

    postgrest:
        image: "sauberprojekt/postgrest:${TAG:-master}"
        networks:
            - sauber-network
        secrets:
            - postgrest_jwt_secret
            - postgrest_password
            - sauber_manager_password
        environment:
            - PGRST_PASSWORD_FILE=/run/secrets/postgrest_password
            - PGRST_USER=authenticator
            - PGRST_DB_POOL=5
            - PGRST_MAX_ROWS=1000
            - PGRST_JWT_SECRET_FILE=/run/secrets/postgrest_jwt_secret
            - PGRST_DB_SERVER=db
            - PGRST_DB_PORT=5432
            - PGRST_DB_NAME=sauber_data
            - PGRST_DB_SCHEMA=image_mosaics
            - PGRST_DB_ANON_ROLE=anon
        deploy:
            restart_policy:
             condition: on-failure
        depends_on:
            - db
        ports:
            - "3000:3000"

    um_server:
        image: "store/softwareag/universalmessaging-server:10.5"
        networks:
            - sauber-network
        # secrets:
        #environment:
        # deploy:
        #     restart_policy:
        #      condition: on-failure
        # depends_on:
        # healthcheck:
        volumes:
            - um_data:/opt/softwareag/UniversalMessaging/server/umserver/data
            - um_logs:/opt/softwareag/UniversalMessaging/server/umserver/logs
            - um_licence:/opt/softwareag/UniversalMessaging/server/umserver/licence
            - um_users:/opt/softwareag/common/conf
        ports:
            - "9876:9000"

    # can be commented in for local debugging, no use in production
    # test_messenger:
    #     image: "sauberprojekt/test_messenger:${TAG:-master}"
    #     networks:
    #         - sauber-network
    #     environment:
    #         - UM_SERVER=um_server:9000
    #         - UM_CHANNEL=raster_data
    #         - CLASSPATH=/opt/target/classes
    #     depends_on:
    #         - um_server
    #     tty:
    #         true

    raster_downloader:
        image: "sauberprojekt/raster_download:${TAG:-master}"
        networks:
            - sauber-network
        secrets:
            - app_password
            - hhi_rest_user
            - hhi_rest_pw
            - hhi_ip_address
        environment:
            - APP_PASSWORD_FILE=/run/secrets/app_password
            - HHI_REST_USER_FILE=/run/secrets/hhi_rest_user
            - HHI_REST_PASSWORD_FILE=/run/secrets/hhi_rest_password
            - DB_USER=app
            - UM_CHANNEL=raster_data
            - UM_SERVER=um_server:9000
        # deploy:
        #     restart_policy:
        #         condition: always
        depends_on:
            - um_server
        volumes:
            - ./geoserver_mnt/raster_data:/opt/raster_data:Z
            - ./geoserver_mnt/geoserver_data:/opt/geoserver_data:Z
        tty:
            true

    json_downloader:
        image: "sauberprojekt/json_download:${TAG:-master}"
        networks:
            - sauber-network
        secrets:
            - app_password
            - hhi_rest_user
            - hhi_rest_pw
            - hhi_ip_address
        environment:
            - SAUBER_APP_PASSWORD_FILE=/run/secrets/app_password
            - HHI_REST_USER_FILE=/run/secrets/hhi_rest_user
            - HHI_REST_PASSWORD_FILE=/run/secrets/hhi_rest_password
            - HHI_REST_PASSWORD_FILE=/run/secrets/hhi_ip_address
            - DB_USER=app
            - UM_CHANNEL=station_data
            - UM_SERVER=um_server:9000
        # deploy:
        #     restart_policy:
        #         condition: always
        depends_on:
            - um_server
        volumes:
            - json_data:/json_data/:Z
        tty:
            true

    lanuv_downloader:
        image: "sauberprojekt/lanuv_download:${TAG:-master}"
        networks:
            - sauber-network
        secrets:
            - app_password
        environment:
            - APP_PASSWORD_FILE=/run/secrets/app_password
        depends_on:
            - um_server
        volumes:
            - lanuv_data:/lanuv_data
        tty:
            true

    lubw_downloader:
        image: "sauberprojekt/lubw_download:${TAG:-master}"
        networks:
            - sauber-network
        secrets:
            - app_password
            - lubw_user
            - lubw_password
            - lubw_server
        environment:
            - APP_PASSWORD_FILE=/run/secrets/app_password
            - LUBW_PASSWORD_FILE=/run/secrets/lubw_password
            - LUBW_USER_FILE=/run/secrets/lubw_user
            - LUBW_SERVER_FILE=/run/secrets/lubw_server
        depends_on:
            - um_server
        volumes:
            - lubw_data:/data/xml_data
        tty:
            true

    geoserver_raster_publisher:
      image: "sauberprojekt/geoserver_raster_publisher:${TAG:-master}"
      networks:
          - sauber-network
      secrets:
          - postgrest_password
          - geoserver_user
          - geoserver_password
          - sauber_manager_password
      environment:
          - GSPUB_PG_REST_USER=anon
          - GSPUB_GS_REST_URL=http://geoserver:8080/geoserver/rest/
      deploy:
          restart_policy:
            condition: on-failure
      depends_on:
          - postgrest
          - geoserver

    station_layer_creator:
      image: "sauberprojekt/station_layer_creator:${TAG:-master}"
      networks:
          - sauber-network
      secrets:
          - sauber_manager_password
          - geoserver_user
          - geoserver_password
      #environment:
      #    - STCR_STATIONS_TYPENAME=station_data:fv_stations
      deploy:
          restart_policy:
            condition: on-failure
      depends_on:
          - db
          - geoserver

    # can be commented in for local debugging, no use in production
    # um-ol-demo:
    #     image: sauberprojekt/um_ol_demo:${TAG:-master}
    #     networks:
    #         - sauber-network
    #     ports:
    #         - "9999:80"

    # can be commented in for local debugging, no use in production
    # um-js-demo:
    #     image: sauberprojekt/um_js_demo:${TAG:-master}
    #     networks:
    #         - sauber-network
    #     ports:
    #         - "9998:80"

    proxy-webserver:
        image: nginx:stable
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - /etc/letsencrypt:/etc/ssl/certs:ro
        networks:
            - sauber-network
        depends_on:
            - geoserver
            - um_server
            - um-js-demo

    # can be commented in for local debugging, no use in production
    # um-publisher:
    #     image: um_publisher:latest
    #     networks:
    #         - sauber-network
    #     ports:
    #         - "9990:80"

    db_webhooks:
        image: "sauberprojekt/db_webhooks:${TAG:-master}"
        # ports:
        # volumes:
        #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        #     - /etc/letsencrypt:/etc/ssl/certs:ro
        secrets:
            - slack_channel_url
            - app_password
        environment: 
            - SLACK_CHANNEL_URL_FILE=/run/secrets/slack_channel_url
            - APP_PASSWORD_FILE=/run/secrets/app_password
        networks:
            - sauber-network
        deploy:
          restart_policy:
            condition: on-failure
        depends_on:
            - db
